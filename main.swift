//
//  main.swift
//  exersize
//
//  Created by –í–∏–∫—Ç–æ—Ä–∏—è –§–µ–¥–æ—Å–æ–≤–∞ on 04.09.2022.
//

import Foundation
//–í –¥—é–π–º–µ –∏–º–µ–µ—Ç—Å—è 2.54 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ —Ä–æ—Å—Ç –≤ –¥—é–π–º–∞—Ö, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —ç—Ç–æ—Ç —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö. –õ–∏–±–æ, –µ—Å–ª–∏ –≤–∞–º —Ç–∞–∫ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–∂–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–æ—Å—Ç –≤ —Å–∞–Ω¬≠ —Ç–∏–º–µ—Ç—Ä–∞—Ö –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤ –¥—é–π–º—ã.
func getUserHait() {
    print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ –¥—é–π–º–∞—Ö: ")
    
    if let input = readLine() {
        if let hait = Double(input) {
           print("–í–∞—à —Ä–æ—Å—Ç –≤ –¥—é–π–º–∞—Ö: \(hait), –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö \(hait * 2.54)")
        }
    }
}

//getUserHait()

// –í –≥–æ–¥—É —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ 3.156—Ö10^7 —Å–µ–∫—É–Ω–¥. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–µ –∑–Ω–∞¬≠ —á–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

func getUserAgeinSeconds() {
    print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç(–ª–µ—Ç): ")
    
    if let input = readLine() {
        if let year = Double(input) {
            print("–í—ã –ø—Ä–æ–∂–∏–ª–∏ : \(year * 3.156 * pow(10, 7)) —Å–µ–∫—É–Ω–¥ :D ")
        }
    }
}


//getUserAgeinSeconds()

//–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —á–∏—Å–ª–æ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è, –∞ –∑–∞—Ç–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤—ã–≤–æ–¥–∏—Ç —ç—Ç–æ –∂–µ —á–∏—Å–ª–æ –≤ 2–∏—á–Ω–æ–π, 8–º–∏—Ä–∏—á–Ω–æ–π –∏ 16—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–∞—Ö —Å—á–∏—Å–ª–µ–Ω–∏—è

//–ü–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–π –∞—Ç–∞–∫–∏ —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–æ–≤ –Ω–∞ –¢–µ–ª—å-–ê–≤–∏–≤, –ú–æ–π—à–∞ —Ä–µ—à–∏–ª –∑–∞–∫—É–ø–∏—Ç—å—Å—è –Ω–æ–≤—ã–º–∏ –ü–í–û —Ä–∞–∫–µ—Ç–∞–º–∏ —É –°–®–ê, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–µ–Ω—å–≥–∏ –æ–Ω –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ–≤–µ—Ä—è–µ—Ç –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞ —É –Ω–µ–≥–æ –Ω–µ—Ç, –∑–∞—Ç–æ, –µ—Å—Ç—å –í–∏–∫–∞ –∏ –æ–Ω–∞ –ª—é–±–∏—Ç Swift. –†–∞–∫–µ—Ç–∞ —Å—Ç–æ–∏—Ç 10000 –¥–æ–ª–ª–∞—Ä–æ–≤. –ú–æ–π—à–∞ —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ 500 —Ä–∞–∫–µ—Ç –∏ –ø–∞—Ä—É –Ω–æ–≤–µ–Ω—å–∫–∏—Ö tesla model S –∑–∞ 30000 –¥–æ–ª–ª–∞—Ä–æ–≤ –∫–∞–∂–¥–∞—è. –ü–æ–º–æ–≥–∏—Ç–µ –ú–æ–π—à–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –æ–Ω –ø–æ—Ç—Ä–∞—Ç–∏—Ç –≤—Å–µ–≥–æ –¥–µ–Ω–µ–≥, –∫–∞–∫–∞—è –±—É–¥–µ—Ç —Ç–æ—á–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ —Ä–∞–≤–Ω–∞ 1.25% –Ω–∞ —Ç–æ–≤–∞—Ä, —Å–∫–æ–ª—å–∫–æ –ú–æ–π—à–∞ —Å–º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å —Ä–∞–∫–µ—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Ö–æ—á–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ 5000000 —à–µ–∫–µ–ª–µ–π (1 —à–µ–∫–µ–ª—å = 0.3 –¥–æ–ª–ª–∞—Ä–∞)
let roketPrice: Decimal = 10000
let teslaModelSPrice: Decimal = 30000
let buget: Decimal = 5000000

func caclutatePriceofWapon() {
    let bugetInDollars: Decimal = buget * 0.3
    let rocketPriceWithTax: Decimal = (roketPrice + (roketPrice / 100) * 1.25)
    let teslaPriceWithTax: Decimal = (teslaModelSPrice + (teslaModelSPrice / 100) * 1.25)
    let totalRocketPrice: Decimal = rocketPriceWithTax * 500
    let totalTeslaPrice: Decimal = teslaPriceWithTax * 2
    let credit = totalTeslaPrice + totalRocketPrice
    let rocketBuget = bugetInDollars-totalTeslaPrice
    let totalNumberOfRockets = (rocketBuget / rocketPriceWithTax)
    
    print("""
          –° –∏–º–µ—é—â–∏–º—Å—è –±—é–¥–∂–µ—Ç–æ–º –≤ \(buget) —à–µ–∫–µ–ª–µ–π, –ú–æ–π—à–∞ –∏–º–µ–µ—Ç \(bugetInDollars) –¥–æ–ª–ª–∞—Ä–æ–≤.
          –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π —Ä–∞–∫–µ—Ç—ã –∏ tesla model S (—Å —É—á–µ—Ç–æ–º –Ω–∞–ª–æ–≥–∞) —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç : \(rocketPriceWithTax) –∏ \(teslaPriceWithTax) —Å–æ–æ–≤–µ—Ç–≤–µ–Ω–Ω–æ.
          –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å 500 —Ä–∞–∫–µ—Ç –∏ 2 –º–∞—à–∏–Ω tesla model S: \(credit) –¥–æ–ª–ª–∞—Ä–æ–≤.
          –ï—Å–ª–∏ –ú–æ–π—è —Ä–µ—à–∏—Ç—Å—è –Ω–∞ —Ç–∞–∫—É—é –ø–æ–∫—É–ø–∫—É —Ç–æ —ç—Ç–æ –æ—Ç –µ–≥–æ –±—é–¥–∂–µ—Ç–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è: \(bugetInDollars - credit)
          –° —É—á–µ—Ç–æ–º –±—é–¥–∂–µ—Ç–∞ –∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –Ω–∞ –º–∞—à–∏–Ω—ã, –±—é–¥–∂–µ—Ç –Ω–∞ —Ä–∞–∫–µ—Ç—ã —Å–æ—Å—Ç–∞–≤–∏—Ç: \(rocketBuget) –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–µ–≥–æ –∏ —Ü–µ–Ω—ã –Ω–∞ —Ä–∞–∫–µ—Ç—ã, –ú–æ–π—à–∞ –º–æ–∂–µ—Ç —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å \(totalNumberOfRockets._length) —Ä–∞–∫–µ—Ç—ã
          """)
    
}

// –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞, –∞ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–π –≤ –µ–≥–æ —Å–æ—Å—Ç–∞–≤–µ;

func findMyFactorial(number: UInt64) -> UInt {
    var result: UInt64 = 1
    var zeroInResult: UInt64 = 0
    
    for i in 1...number {
        result &*= UInt64(i)
    }
    
        for i in String(result) {
            if i == "0" {
                zeroInResult += 1
            }
        }
    
    print(result)
    print(zeroInResult)
    return UInt(zeroInResult)
}

 //findMyFactorial(number: )





// TODO:
// 1) –∑–∞–¥–∞—Ç—å —Ç—Ä–∏ —É—Ä–æ–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
// 2) –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
// 3) –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º

func cowsAndNumbers() {
    gameProcess(levelAndChance: chooseLevel(), role: —ÅhooseRole())
}
func convertStringToInt(string: String) -> Int {
    var result: Int = 0
    if let input = readLine() {
        if let answer = Int(input) {
            result = answer
        }
    }
    return result
}

func chooseLevel() -> (ClosedRange<Int>,ClosedRange<Int>) {
    var answer = String()
    let lowLevel = (0...10, 1...3)
    let middleLevel = (0...100, 1...6)
    let hardLevel = (0...1000, 1...8)

    
    print("""
              ü§ñ: –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
              1. –õ–µ–≥–∫–∏–π (—á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 10)
              2. –°—Ä–µ–¥–Ω–∏–π (—á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 100)
              3. –°–ª–æ–∂–Ω—ã–π (—á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 1000) \n
          """)
    var levelNumber = convertStringToInt(string: answer)
    
    switch levelNumber {
        case  1:  return lowLevel
        case  2:  return middleLevel
        case  3:  return hardLevel
        default:  return middleLevel
    }
    
}

func —ÅhooseRole() -> Int {
    var role = String()
    print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–π —Ä–æ–ª–∏: ")
    print("1. –ó–∞–≥–∞–¥—ã–≤–∞—é")
    print("2. –û—Ç–≥–∞–¥—ã–≤–∞—é")
    var number = convertStringToInt(string: role)
    
    switch number {
        case  1:
        return Int(number)
        case  2:
        return Int(number)
        default:
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å"
    }
    return number
}

func gameProcess(levelAndChance: (ClosedRange<Int>,ClosedRange<Int>), role: Int) -> Void  {
    //var imagineNumber: Int = Int.random(in: levelAndChance.0)
    
    if role == 1 {
        print("–ò–≥—Ä–æ–∫ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ  \(levelAndChance.0): ") // –ø—Ä–∏–¥—É–º–∞–π —Ç–∞–∫, —á—Ç–æ –±—ã —á–∏—Å–ª–æ –∏—Å—á–µ–∑–ª–æ –∏–ª–∏ –≤–≤–æ–¥–∏–ª–æ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ
        var imagineNumber: Int = convertStringToInt(string: readLine()!)
        print("–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ :)")
        for chance in levelAndChance.1 {
            let testNumber = convertStringToInt(string: readLine()!)
            let bulls = countBulls(imagineNumber, testNumber)
            if bulls == String(testNumber).count {
                print("–ü–æ–±–µ–¥–∞!")
                break
            }
           let cows = countCows(imagineNumber, testNumber)
        }
        
    } else if role == 2 {
        let imagineNumber = Int.random(in: levelAndChance.0)
    
        print("–Ø –∑–∞–≥–∞–¥–∞–ª —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ \(levelAndChance.0), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–≥–æ —É–≥–∞–¥–∞—Ç—å!")
        for chance in levelAndChance.1 {
            let testNumber = convertStringToInt(string: readLine()!)
            let bulls = countBulls(imagineNumber, testNumber)
            if bulls == String(testNumber).count {
                print("–ü–æ–±–µ–¥–∞!")
                break
            }
           let cows = countCows(imagineNumber, testNumber)
        
        
    }
}


func countBulls(_ firstNumber: Int, _ secondnumber: Int) -> Int {
    var bulls = 0
    for c in String(firstNumber) {
        for p in String(secondnumber) {
            if c == p {
                bulls += 1
            }
        }
    }
    print("–í—ã —É–≥–∞–¥–∞–ª–∏ \(bulls) –ë—ã–∫–æ–≤!")
    return bulls
}

func countCows(_ firstNumber: Int, _ secondnumber: Int) -> Int {
    var computerNumberArray: [Int] = String(firstNumber).compactMap {
        $0.wholeNumberValue
    }
    var playerNumberArray: [Int] = String(secondnumber).compactMap { symbol in
        symbol.wholeNumberValue
    }
    var cows = 0
    for i in computerNumberArray {
        if playerNumberArray.contains(i) {
            cows += 1
        }
    }
    print("–í—ã —É–≥–∞–¥–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —á–∏—Å–ª–æ \(cows)")
    return cows
}
}
cowsAndNumbers()
