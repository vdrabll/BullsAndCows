//
//  GameProcess.swift
//  exersize
//
//  Created by –í–∏–∫—Ç–æ—Ä–∏—è –§–µ–¥–æ—Å–æ–≤–∞ on 19.10.2022.
//

import Foundation

class GameProcess {
    
    func —ÅhooseRole() -> Role {
        print("""
         –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π —Ä–æ–ª–∏:
        1) –ó–∞–≥–∞–¥—ã–≤–∞—Ç—å
        2) –û—Ç–≥–∞–¥—ã–≤–∞—Ç—å
        
        """)
        var value = readLine()
        if let number = value {
            print("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ—é —Ä–æ–ª—å!")
        } else {
            print("–¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç :(")
            return self.—ÅhooseRole()
        }
        let role = Int(value!)!
        if role < 1 || role > 2 {
            print("–¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ")
        }
        
        let choosedRole = Role(number: role)
        if choosedRole == Role.Unknown {
            return self.—ÅhooseRole()
        } else {
            return choosedRole
        }
    }
    
    func chooseLevel() -> DifficultyLevel {
    
        print("""
                  ü§ñ: –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
                  1. –õ–µ–≥–∫–∏–π (—á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 10)
                  2. –°—Ä–µ–¥–Ω–∏–π (—á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 100)
                  3. –°–ª–æ–∂–Ω—ã–π (—á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 1000) \n
              """)
        
        // –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å
        var value = readLine()
        if let number = value {
            print("–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º \(number)!")
        } else {
            print("–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å :(")
            return self.chooseLevel()
        }
        let level = Int(value!)!
        if level < 1 || level > 3 {
            print("–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å")
        }
        return DifficultyLevel(number: level)
    }
   
    func startGame() -> Void  {
        var imagineNumber: Int
        let role = self.—ÅhooseRole()
        let level = self.chooseLevel()
        if role == Role.Riddler {
            print("–ò–≥—Ä–æ–∫ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ  \(level.gap): ") // –ø—Ä–∏–¥—É–º–∞–π —Ç–∞–∫, —á—Ç–æ –±—ã —á–∏—Å–ª–æ –∏—Å—á–µ–∑–ª–æ –∏–ª–∏ –≤–≤–æ–¥–∏–ª–æ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ
             imagineNumber = Int(readLine()!)!
            print("–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ :)")
            
        } else {
            imagineNumber = Int.random(in: level.gap )
        }
        chekingNumber(level: level, imagineNumber: imagineNumber)
    }
        
        func chekingNumber(level: DifficultyLevel,imagineNumber: Int ) {
            for chance in level.chance {
                let testNumber = Int(readLine()!)!
                let bulls = countBulls(imagineNumber, testNumber)
                if bulls == String(testNumber).count {
                    print("–ü–æ–±–µ–¥–∞!")
                    break
                }
                let cows = countCows(imagineNumber, testNumber)
            }
        }

        func countBulls(_ firstNumber: Int, _ secondnumber: Int) -> Int {
        var bulls = 0
        for c in String(firstNumber) {
            for p in String(secondnumber) {
                if c == p {
                    bulls += 1
                }
            }
        }
        print("–í—ã —É–≥–∞–¥–∞–ª–∏ \(bulls) –ë—ã–∫–æ–≤!")
        return bulls
    }

    func countCows(_ firstNumber: Int, _ secondnumber: Int) -> Int {
        var computerNumberArray: [Int] = String(firstNumber).compactMap {
            $0.wholeNumberValue
        }
        var playerNumberArray: [Int] = String(secondnumber).compactMap { symbol in
            symbol.wholeNumberValue
        }
        var cows = 0
        for i in computerNumberArray {
            if playerNumberArray.contains(i) {
                cows += 1
            }
        }
        print("–í—ã —É–≥–∞–¥–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —á–∏—Å–ª–æ \(cows)")
        return cows
    }
    }






