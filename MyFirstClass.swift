//
//  MyFirstClass.swift
//  exersize
//
//  Created by –í–∏–∫—Ç–æ—Ä–∏—è –§–µ–¥–æ—Å–æ–≤–∞ on 15.09.2022.
//

import Foundation


// TODO:
// 1) –∑–∞–¥–∞—Ç—å —Ç—Ä–∏ —É—Ä–æ–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
// 2) –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
// 3) –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º

func cowsAndNumbers() {
    chooseLevel()
    —ÅhooseRole()
}
func convertStringToInt(string: String) -> Int {
    var result: Int = 0
    if let input = readLine() {
        if let answer = Int(input) {
            result = answer
        }
    }
    return result
}

func chooseLevel() -> (ClosedRange<Int>,ClosedRange<Int>) {
    var answer = String()
    print("""
              ü§ñ: –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
              1. –õ–µ–≥–∫–∏–π (—á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 10)
              2. –°—Ä–µ–¥–Ω–∏–π (—á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 100)
              3. –°–ª–æ–∂–Ω—ã–π (—á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 1000) \n
          """)
    var levelNumber = convertStringToInt(string: answer)
    var returnedRanges: ((ClosedRange<Int>,ClosedRange<Int>))
    
    switch levelNumber {
        case  1:  return (0...10, 1...3)
        case  2:  return (0...100, 1...6)
        case  3:  return (0...1000, 1...8)
        default:  return (0...4, 4...4)
    }
    
}

func —ÅhooseRole() -> Int {
    var role = String()
    print("–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å: ")
    print("1. –ò–≥—Ä–æ–∫")
    print("2. –í–µ–¥—É—â–∏–π")
    var number = convertStringToInt(string: role)
    
    switch number {
        case  1:
        return Int(number)
        case  2:
        return Int(number)
        default:
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å"
    }
    return Int(number)
}

func gameProcess(level: Int, role: Int) -> Void  {
    var userNumber = Int()
    var computerNumber = Int()
    
    
    switch role {
    case 1:
        // –∫–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç, —è —Ä–∞–∑–≥–∞–¥—ã–≤–∞—é
        let range = chooseLevel().0
        let computerNumber = Int.random(in: chooseLevel().0)
        
        print(" ü§ñ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç \(range), —Ö–∞—Ö–∞, –ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞–π –≥–ª—É–ø—ã–π —á–µ–ª–æ–≤–µ–∫")
        var answer = readLine()!
        
        for i in chooseLevel().1 {
            lookIfNumberBool(computerNumber: computerNumber, playerNumber: userNumber )
            lookIfNuberCow(computerNumber: computerNumber, playerNumber: userNumber)
        }
            
    case 2:
        
        let range = chooseLevel().0
        print(" ü§ñ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç \(range), —è —Ç–æ—á–Ω–æ –µ–≥–æ —É–≥–∞–¥–∞—é!")
        
        for i in chooseLevel().1 {
            lookIfNumberBool(computerNumber: computerNumber, playerNumber: userNumber )
            lookIfNuberCow(computerNumber: computerNumber, playerNumber: userNumber)
        }
        
    default:
        "efefef"
    }
}


func lookIfNumberBool(computerNumber: Int, playerNumber: Int) -> Int {
    var bulls = 0
    for c in String(computerNumber) {
        for p in String(playerNumber) {
            if c == p {
                print("–í—ã —É–≥–∞–¥–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —á–∏—Å–ª–æ \(c) –ø–æ –∏–Ω–¥–µ–∫—Å—É \( String(computerNumber).index(of: c))")
                bulls += 1
            }
        }
    }
    return bulls
}

func lookIfNuberCow(computerNumber: Int, playerNumber: Int) -> Int {
    var computerNumberArray: [Int] = String(computerNumber).compactMap {
        $0.wholeNumberValue
    }
    var playerNumberArray: [Int] = String(playerNumber).compactMap { symbol in
        symbol.wholeNumberValue
    }
    var cows = 0
    for i in computerNumberArray {
        if playerNumberArray.contains(i) {
            cows += 1
        }
    }
    
    return cows
}

 cowsAndNumbers()
